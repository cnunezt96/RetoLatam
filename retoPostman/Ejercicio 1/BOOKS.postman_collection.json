{
	"info": {
		"_postman_id": "f4a592a6-7c50-4e80-8468-1e719e41b809",
		"name": "BOOKS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12670062"
	},
	"item": [
		{
			"name": "Books status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const respuesta = pm.response.json();\r",
							"\r",
							"pm.test(\"Validar status ok\",()=>{\r",
							"pm.expect(respuesta.status).to.eql(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Tiempo de respuesta es menor a 300ms\", () => {\r",
							"    pm.expect(responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Books list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que la estructura del body, contenga el campo type\", ()=>{\r",
							"     pm.expect(pm.response.text()).to.include(\"type\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single book id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Tiene stock disponible\", ()=> {\r",
							"   pm.expect(response['current-stock']).to.be.above(0)\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Validar typo de libro\",()=>{\r",
							"pm.expect(response['type']).to.eql(\"fiction\")\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/:bookId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Validar mensaje de usuario ya registrado\", () => {\r",
							"    pm.expect(response['error']).to.eql(\"API client already registered. Try a different email.\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"clientName\": \"Camilo\",\r\n    \"clientEmail\": \"cnunez@example.com\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Book  orders send",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const bookOrders = {\r",
							"    bookId: \"\",\r",
							"   customerName: \"\"\r",
							"}\r",
							"const body = JSON.parse(pm.request.body.raw);\r",
							"const prueba = JSON.stringify(Object.keys(bookOrders))===JSON.stringify(Object.keys(body));\r",
							"\r",
							"pm.test(\" prueba comparacion estructura body \", () =>{\r",
							"    pm.expect(true).to.be.eql(prueba);\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Validar que el campo created es true \", ()=> {\r",
							"    pm.expect(response['created']).to.true\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"bookId\": 1,\r\n   \"customerName\": \"{{$randomFullName}}\"\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Book  orders send faild",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const bookOrders = {\r",
							"    \r",
							"   customerName: \"\"\r",
							"}\r",
							"const body = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"const prueba = JSON.stringify(Object.keys(bookOrders))===JSON.stringify(Object.keys(body));\r",
							"\r",
							"pm.test(\" prueba comparacion estructura body \", () =>{\r",
							"    pm.expect(true).to.be.eql(prueba);\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"customerName\": \"{{$randomFullName}}\"\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Book all  orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Tiempo de respuesta es menor a 2000ms\", () => {\r",
							"    pm.expect(responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validar que la estructura del body, contenga el campo type\", ()=>{\r",
							"     pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Book all  orders faild",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Tiempo de respuesta es menor a 2000ms\", () => {\r",
							"    pm.expect(responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validar que la estructura de respuesta, contenga el campo !DOCTYPE html\", ()=>{\r",
							"     pm.expect(pm.response.text()).to.include(\"!DOCTYPE html\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orderss",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orderss"
					]
				}
			},
			"response": []
		},
		{
			"name": "Book   orders id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Validar que la estructura del body, contenga el campo createdBy\", ()=>{\r",
							"     pm.expect(pm.response.text()).to.include(\"createdBy\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"query": [
						{
							"key": "id",
							"value": "h1MvwfoyXkAxTGnoz7cwR",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{ordersId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update book   orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Tiempo de respuesta es menor a 300ms\", () => {\r",
							"    pm.expect(responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"const bookOrders = {\r",
							"    customerName: \"\"\r",
							"}\r",
							"const body = JSON.parse(pm.request.body.raw);\r",
							"const prueba = JSON.stringify(Object.keys(bookOrders))===JSON.stringify(Object.keys(body));\r",
							"\r",
							"pm.test(\" prueba comparacion estructura body \", () =>{\r",
							"    pm.expect(true).to.be.eql(prueba);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"PRUEBA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{ordersId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update book   orders faild",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Tiempo de respuesta es menor a 300ms\", () => {\r",
							"    pm.expect(responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"const bookOrders = {\r",
							"    customerName: \"\"\r",
							"}\r",
							"const body = JSON.parse(pm.request.body.raw);\r",
							"const prueba = JSON.stringify(Object.keys(bookOrders))===JSON.stringify(Object.keys(body));\r",
							"\r",
							"pm.test(\" prueba comparacion estructura body \", () =>{\r",
							"    pm.expect(false).to.be.eql(prueba);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customer\": \"PRUEBA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderidFaild}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete book   orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Validar que la estructura de respuesta no contenga el campo:error\", ()=>{\r",
							"     pm.expect(pm.response.text()).to.not.include(\"error\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{ordersId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete book   orders faild",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Validar que la estructura de respuesta no contenga el campo:error\", ()=>{\r",
							"     pm.expect(pm.response.text()).to.include(\"error\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderidFaild}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "---",
			"type": "string"
		}
	]
}